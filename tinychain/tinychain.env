#!/usr/bin/env bash

# Get TINYCHAIN_BASE
SOURCE="${BASH_SOURCE[0]:-${(%):-%x}}"
while [ -h "$SOURCE" ]; do
    DIR="$(cd -P "$(dirname "$SOURCE")" > /dev/null 2>&1 && pwd)"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
TINYCHAIN_BASE="$(cd -P "$(dirname "$SOURCE")" > /dev/null 2>&1 && pwd)"
export TINYCHAIN_BASE

# Get other directories
export TINYCHAIN_BUILD="$TINYCHAIN_BASE/build"
export TINYCHAIN_PATH="$TINYCHAIN_BASE/install"

_install() {
    echo -e "\033[33m==> Installing Tinychain...\033[0m"

    # Clean slate
    cd $TINYCHAIN_BASE
    rm -rf build/ install/

    local ARCHS=("i386" "x86_64")
    for ARCH in "${ARCHS[@]}"; do
        echo -e "\033[33m==> Building for $ARCH...\033[0m"

        # Arch-specific locations
        local BUILD_DIR="$TINYCHAIN_BUILD/$ARCH"
        local INSTALL_DIR="$TINYCHAIN_PATH/$ARCH"
        local TOOLCHAIN_FILE="$TINYCHAIN_BASE/arch/$ARCH/tinychain.cmake"

        # CMake Configure
        cmake -B "$BUILD_DIR" -S "$TINYCHAIN_BASE" \
            -DARCH="$ARCH" \
            -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
            -DCMAKE_BUILD_TYPE=Release

        # CMake build and install
        cmake --build "$BUILD_DIR" --parallel
        cmake --install "$BUILD_DIR" --prefix "$INSTALL_DIR"

        echo -e "\033[32m==> Tinychain installed for $ARCH\033[0m"
    done

    echo -e "\033[32mTinychain is built and installed to $TINYCHAIN_PATH\033[0m"
}

_build() {
    # Ensure arch is passed
    if [ -z "$1" ]; then
        echo -e "\033[31mError\033[0m: Architecture required for 'build'"
        return 1
    fi

    # Args
    local arch="$1"
    local dir="${2:-.}"
    local build_type="${3:-Release}"

    # Validate build type
    if [[ "$build_type" != "Debug" && "$build_type" != "Release" ]]; then
        echo "Error: Invalid build type '$build_type'. Use 'Debug' or 'Release'."
        return 1
    fi

    echo -e "\033[33m==> Building $build_type for $arch\033[0m"

    # Environment variables
    TOOLCHAIN_FILE="$TINYCHAIN_BASE/arch/$arch/tinychain.cmake"
    TOOLCHAIN_PATH="$TINYCHAIN_PATH/$arch"

    # Ensure runtime matches arch
    if ! grep -v '^[[:space:]]*#' "$dir/CMakeLists.txt" | grep -iq "tinycrt_$arch"; then
        echo -e "\033[31mError\033[0m: $arch tinycrt not included!"
        return 1
    fi

    # Ensure valid arch
    if [[ ! -d "$TOOLCHAIN_PATH" ]]; then
        echo -e "\033[31mError\033[0m: Tinychain not installed for $arch!"
        return 1
    fi

    BUILD_DIR="$dir/build"
    rm -rf $BUILD_DIR

    # CMake
    cmake -B "$BUILD_DIR" \
        -DCMAKE_PREFIX_PATH="$TOOLCHAIN_PATH" \
        -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" \
        -DCMAKE_BUILD_TYPE=$build_type
    cmake --build "$BUILD_DIR"
}

_help() {
    echo -e "\033[33mTinychain Commands\033[0m"
    echo -e "Usage: tinychain <command> [options]"
    echo -e "Commands:"
    echo -e "  install          - Builds and installs Tinychain"
    echo -e "  build <arch>     - Builds a project for the specified architecture"
    echo -e "  help             - Shows this help message"
}

tinychain() {
    local command="$1"

    # Help page
    if [ -z "$command" ]; then
        _help
        return 0
    fi

    shift
    case "$command" in
    install)
        _install
        ;;
    build)
        _build "$@"
        ;;
    help)
        _help
        return 0
        ;;
    *)
        echo -e "\033[31mError\033[0m: Unknown command: $command"
        return 1
        ;;
    esac
}

_tinychain() {
    local cur
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    local commands="install build help"
    COMPREPLY=($(compgen -W "${commands}" -- "$cur"))
}

# Command autocompletion
if [ -n "$BASH_VERSION" ]; then
    complete -F _tinychain tinychain
elif [ -n "$ZSH_VERSION" ]; then
    compdef _tinychain tinychain
fi
